#!/usr/bin/env perl

# jira-commention
# Replace "@"-prefixed email addresses in the input with Atlassian Wiki
# formatted account IDs.

# Copyright (c) 2024  Teddy Wing
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.


=head1 NAME

jira-commention - Replace email addresses in input with Jira user IDs

=head1 SYNOPSIS

jira-commention [options] [file...]

Options:

  --login       Jira login email address
  --token       Jira API token
  --endpoint    Jira site URL host (e.g. example.atlassian.net)
  --help        print help

=head1 DESCRIPTION

Convert specially formatted email addresses in the input into Jira user IDs by
searching with the Jira API for each user.

Email addresses prefixed with an "@" character and followed by whitespace are
replaced with the Jira user ID corresponding to that email address.

If no file arguments are specified, input will be read from standard input.

=head1 OPTIONS

=over 8

=item --login

Jira login email address.

=item --token

Jira API token. Obtained from:
https://id.atlassian.com/manage-profile/security/api-tokens

=item --endpoint

The team-specific Atlassian host (e.g. B<example.atlassian.net>).

=item -h, --help

Print usage help.

=back

=cut


use strict;
use warnings;
use v5.10;

use Getopt::Long;
use Pod::Usage;

use constant {
	EX_USAGE => 64,
	EX_NOUSER => 67,
};

my $auth_email = '';
my $token = '';
my $jira_endpoint = '';
my $opt_help = 0;

GetOptions(
	'login=s' => \$auth_email,
	'token=s' => \$token,
	'endpoint=s' => \$jira_endpoint,
	'h|help' => \$opt_help,
)
	or die('argument error');

if ($opt_help) {
	pod2usage(-verbose => 0, -exitval => 0);
}

if ($auth_email eq '') {
	say STDERR "error: missing required argument '--login'";
	exit EX_USAGE;
}
if ($token eq '') {
	say STDERR "error: missing required argument '--token'";
	exit EX_USAGE;
}
if ($jira_endpoint eq '') {
	say STDERR "error: missing required argument '--endpoint'";
	exit EX_USAGE;
}

while (<<>>) {
	my $line = $_;

	$line =~ s/(?<prefix>\s)@(?<email>[^\s]+)/$+{prefix} . jira_user_id_from_email($+{email})/eg;

	print $line;
}

sub jira_user_id_from_email {
	my ($email) = @_;

	my $jira_user_id = qx{
		curl \\
			--silent \\
			--user '${auth_email}:${token}' \\
			--header 'Accept: application/json' \\
			--location 'https://${jira_endpoint}/rest/api/2/user/search?query=${email}' \\
		| jq --raw-output '.[0].accountId'
	};
	chomp $jira_user_id;

	if ($jira_user_id eq 'null') {
		say STDERR "error: no Jira user ID for email '$email'";
		exit EX_NOUSER;
	}

	my $at_mention_text = '[~accountid:' . $jira_user_id . ']';

	return $at_mention_text;
}
